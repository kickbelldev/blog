name: ♻️ Claude 리팩토링 작업
description: Claude Code에게 코드 리팩토링 작업을 지시하기 위한 템플릿입니다.
title: "[REFACTOR] "
labels: ["refactor", "claude"]
body:
  - type: markdown
    attributes:
      value: |
        ## ♻️ Claude Code 리팩토링 작업 지시서
        
        Claude Code에게 코드 구조 개선, 최적화, 정리 작업을 지시하기 위한 템플릿입니다.
        현재 코드의 문제점과 개선 방향을 명확히 제시해주세요.

  - type: textarea
    id: current_code_issues
    attributes:
      label: 🔍 현재 코드 문제점
      description: 리팩토링이 필요한 코드의 문제점을 구체적으로 설명해주세요.
      placeholder: |
        예시:
        - 중복된 코드가 여러 컴포넌트에서 반복됨
        - 너무 긴 함수로 인해 가독성이 떨어짐
        - 복잡한 조건문으로 인한 유지보수 어려움
        - 불필요한 의존성이나 import가 많음
        - 네이밍이 일관되지 않음
        - 컴포넌트가 너무 많은 책임을 가짐
    validations:
      required: true

  - type: textarea
    id: target_files
    attributes:
      label: 📁 대상 파일/폴더
      description: 리팩토링할 파일이나 폴더 경로를 명시해주세요.
      placeholder: |
        예시:
        - src/app/_components/Navigation.tsx
        - src/app/blog/_components/
        - src/app/_lib/utils.ts
        - src/app/globals.css
    validations:
      required: true

  - type: dropdown
    id: refactor_type
    attributes:
      label: 🏷️ 리팩토링 유형
      description: 어떤 종류의 리팩토링인가요?
      options:
        - 코드 중복 제거
        - 함수/컴포넌트 분리
        - 네이밍 개선
        - 구조 재조직
        - 성능 최적화
        - 타입 안전성 개선
        - 스타일 통일
        - 의존성 정리
        - 기타
      default: 0
    validations:
      required: true

  - type: textarea
    id: refactor_goals
    attributes:
      label: 🎯 리팩토링 목표
      description: 리팩토링을 통해 달성하고자 하는 목표를 설명해주세요.
      placeholder: |
        예시:
        - 코드 가독성 향상
        - 유지보수성 개선
        - 성능 최적화
        - 타입 안전성 강화
        - 재사용성 증대
        - 코드 일관성 확보
    validations:
      required: true

  - type: textarea
    id: specific_requirements
    attributes:
      label: 📋 구체적 요구사항
      description: 리팩토링 시 지켜야 할 조건이나 특별한 요구사항이 있나요?
      placeholder: |
        예시:
        - 기존 API 호환성 유지
        - 특정 디자인 패턴 적용
        - 성능 저하 없이 진행
        - 기존 테스트 통과 보장
        - 특정 라이브러리 사용/제거

  - type: dropdown
    id: complexity
    attributes:
      label: 📊 복잡도
      description: 리팩토링 작업의 예상 복잡도는 어느 정도인가요?
      options:
        - 🟢 간단 (단순한 정리 작업)
        - 🟡 보통 (구조적 변경 포함)
        - 🔴 복잡 (대규모 재구성 필요)
      default: 1
    validations:
      required: true

  - type: textarea
    id: expected_outcome
    attributes:
      label: ✅ 예상 결과
      description: 리팩토링 완료 후 어떤 모습이 되어야 하는지 설명해주세요.
      placeholder: |
        예시:
        - [ ] 중복 코드가 공통 유틸리티로 분리됨
        - [ ] 컴포넌트 크기가 50줄 이하로 줄어듦
        - [ ] 모든 함수에 명확한 타입 정의
        - [ ] 일관된 네이밍 컨벤션 적용
        - [ ] 빌드 및 테스트 통과

  - type: textarea
    id: breaking_changes
    attributes:
      label: ⚠️ 주의사항
      description: 리팩토링 시 주의해야 할 점이나 영향을 받을 수 있는 부분이 있나요?
      placeholder: |
        예시:
        - 다른 컴포넌트에서 사용 중인 props 변경 금지
        - 외부 라이브러리와의 호환성 유지
        - 기존 스타일링 깨트리지 않기
        - 특정 기능의 동작 방식 유지

  - type: textarea
    id: references
    attributes:
      label: 📚 참고 자료
      description: 리팩토링에 도움이 될 참고 자료나 가이드라인이 있나요?
      placeholder: |
        예시:
        - 코딩 컨벤션 가이드
        - 디자인 패턴 참고 자료
        - 관련 블로그 포스트나 문서
        - 비슷한 리팩토링 사례